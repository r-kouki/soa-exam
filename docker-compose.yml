services:
  mongodb:
    image: mongo:latest
    container_name: dating-app-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db # Persists data in a volume
    networks:
      - app-network

  user-service:
    build:
      context: ./microservices/user-service
      dockerfile: Dockerfile
    container_name: dating-app-user-service
    ports:
      - "50051:50051" # Exposes the gRPC port
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/dating_app_user_db
      - USER_SERVICE_PORT=50051
      # KEYCLOAK_URL will be http://keycloak:8080 if user-service needs to call Keycloak directly
    depends_on:
      - mongodb
    volumes:
      - ./microservices/user-service:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app-network

  keycloak:
    image: quay.io/keycloak/keycloak:latest # Use a specific version in production
    container_name: dating-app-keycloak
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      # - KC_PROXY=edge # Uncomment if running behind a reverse proxy
      # - KC_HOSTNAME_STRICT=false # For development, if facing hostname issues
      # - KC_HTTP_ENABLED=true # If you want to run on HTTP for dev, default is HTTPS on 8443 unless start-dev
      # - KC_DB=postgres # Example if you want to use PostgreSQL for Keycloak
    ports:
      - "8081:8080"
    command: start-dev # For development. For production, use 'start' with proper configuration.
    networks:
      - app-network
    # volumes:
      # - keycloak_data:/opt/keycloak/data # Optional: for persisting Keycloak data

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: dating-app-api-gateway
    ports:
      - "4000:4000"
    environment:
      - API_GATEWAY_PORT=4000
      - USER_SERVICE_GRPC_URL=user-service:50051
      - MATCHING_SERVICE_GRPC_URL=matching-service:50052
      - CHAT_SERVICE_GRPC_URL=chat-service:50053
      - CHAT_SERVICE_WS_URL=ws://chat-service:3001
      - NOTIFICATION_SERVICE_GRPC_URL=notification-service:50054
      - EVENT_SERVICE_GRPC_URL=event-service:50055
      - KEYCLOAK_URL=http://keycloak:8081
      - KEYCLOAK_REALM=dating-app-realm
      - KEYCLOAK_CLIENT_ID=dating-app-gateway
      - KEYCLOAK_CLIENT_SECRET=wsTFdDURHKvfEituRVBfm7ymTh72pzWk # The secret you saved
    depends_on:
      - user-service
      - matching-service
      - chat-service
      - notification-service
      - keycloak
    volumes:
      - ./api-gateway:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app-network

  matching-service:
    build:
      context: ./microservices/matching-service
      dockerfile: Dockerfile
    container_name: dating-app-matching-service
    ports:
      - "50052:50052" # Exposes its gRPC port
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/dating_app_matching_db # Uses same mongo instance, diff DB
      - MATCHING_SERVICE_PORT=50052
      - USER_SERVICE_GRPC_URL=user-service:50051 # Needs to talk to user-service
      - NOTIFICATION_SERVICE_GRPC_URL=notification-service:50054 # For sending match notifications
    depends_on:
      - mongodb
      - user-service
      - notification-service # Add dependency on notification-service
    volumes:
      - ./microservices/matching-service:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app-network

  chat-service:
    build:
      context: ./microservices/chat-service
      dockerfile: Dockerfile
    container_name: dating-app-chat-service
    ports:
      - "3001:3001" # WebSocket port
      - "50053:50053" # gRPC port
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/dating_app_chat_db
      - CHAT_SERVICE_WS_PORT=3001
      - CHAT_SERVICE_GRPC_PORT=50053
    depends_on:
      - mongodb
    volumes:
      - ./microservices/chat-service:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app-network

  notification-service:
    build:
      context: ./microservices/notification-service
      dockerfile: Dockerfile
    container_name: dating-app-notification-service
    ports:
      - "50054:50054" # gRPC port
    environment:
      - NOTIFICATION_SERVICE_GRPC_PORT=50054
    volumes:
      - ./microservices/notification-service:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app-network

  event-service:
    build:
      context: ./microservices/event-service
      dockerfile: Dockerfile
    container_name: dating-app-event-service
    ports:
      - "50055:50055" # gRPC port
    environment:
      - EVENT_SERVICE_GRPC_PORT=50055
      - MONGODB_URI=mongodb://mongodb:27017/dating_app_event_db
      - KAFKA_BROKERS=kafka:9092
      - USER_SERVICE_GRPC_URL=user-service:50051
      - NOTIFICATION_SERVICE_GRPC_URL=notification-service:50054
    depends_on:
      - mongodb
      - kafka
      - zookeeper
      - notification-service
    volumes:
      - ./microservices/event-service:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: dating-app-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: dating-app-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - app-network

volumes:
  mongodb_data:
  # keycloak_data: # Optional: define volume if used above

networks:
  app-network:
    driver: bridge 